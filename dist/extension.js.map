{"version":3,"sources":["webpack://icecomponentinit/./src/createFile.ts","webpack://icecomponentinit/external \"fs\"","webpack://icecomponentinit/external \"path\"","webpack://icecomponentinit/external \"util\"","webpack://icecomponentinit/external \"vscode\"","webpack://icecomponentinit/webpack/bootstrap","webpack://icecomponentinit/./src/extension.ts"],"names":["prefabExtention","folderName","dir","vscode","window","showInputBox","prompt","then","msg","exports","logger","Error","mkdir","err","showInformationMessage","promisify","readdir","i","length","readFile","join","__dirname","data","writeFile","replace","toString","descFileName","module","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","context","console","log","disposable","commands","registerCommand","uri","dirPath","fsPath","genIndex","subscriptions","push"],"mappings":"2GAAA,eACA,SACA,SACA,SAKMA,EAAkB,UAIlBC,EAAa,CAAC,MAAO,SAAU,OAAQ,UAE7C,oBAAyBC,GACRC,EAAOC,OAAOC,aAAa,CAAEC,OAAQ,WAAYC,MAAK,SAASC,GAC5E,IAAKA,EAEH,MADAC,EAAQC,OAAO,QAAS,aAClB,IAAIC,MAAM,aAEhB,EAAAC,MAAMV,EAAM,IAAMM,GAAK,SAAUK,GAC/B,GAAIA,EAEF,MADAV,EAAOC,OAAOU,uBAAuB,OAAON,EAAI,SAC1CK,KAIM,EAAAE,UAAU,EAAAC,QAAV,CAAmBd,GAEnC,IAAK,IAAIe,EAAI,EAAGA,EAAIhB,EAAWiB,OAAQD,IACrC,EAAAL,MAAMV,EAAK,IAAMM,EAAI,IAAMP,EAAWgB,IAAI,SAAUJ,GAClD,GAAIA,EAEF,MADAV,EAAOC,OAAOU,uBAAuB,OAAOb,EAAWgB,GAAG,SACpDJ,KAKZ,EAAAM,SAAS,EAAAC,KAAKC,UAAW,kBAAkB,SAAUR,EAAKS,GACxD,GAAIT,EAEF,MADAV,EAAOC,OAAOU,uBAAuBN,EAAMR,EAAgB,SACrDa,EAER,EAAAE,UAAU,EAAAQ,UAAV,CAAqB,EAAAH,KAAKlB,EAAK,IAAMM,EAAK,UAAWA,EAAMR,GAAkBsB,MAI/E,EAAAH,SAAS,EAAAC,KAAKC,UAAW,iBAAkB,SAAS,SAAUR,EAAKS,GACjE,GAAIT,EAEF,MADAV,EAAOC,OAAOU,uBAAwBN,cAChCK,EAERS,EAAOA,EAAKE,QAAQ,gBAAiBhB,EAAIiB,YACzC,EAAAV,UAAU,EAAAQ,UAAV,CAAqB,EAAAH,KAAKlB,EAAK,IAAMM,EAAK,UAAWA,EAhDxC,OAgD6Dc,MAI5E,EAAAH,SAAS,EAAAC,KAAKC,UAAW,aAAc,SAAS,SAAUR,EAAKS,GAC7D,GAAIT,EAEF,MADAV,EAAOC,OAAOU,uBAAwBY,kBAChCb,EAERS,EAAOA,EAAKE,QAAQ,gBAAiBhB,EAAIiB,YACzC,EAAAV,UAAU,EAAAQ,UAAV,CAAqB,EAAAH,KAAKlB,EAAK,IAAMM,EAAK,IAAKkB,aAA6BJ,W,QC/DpFK,EAAOlB,QAAUmB,QAAQ,O,QCAzBD,EAAOlB,QAAUmB,QAAQ,S,QCAzBD,EAAOlB,QAAUmB,QAAQ,S,QCAzBD,EAAOlB,QAAUmB,QAAQ,YCCrBC,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAavB,QAGrB,IAAIkB,EAASE,EAAyBE,GAAY,CAGjDtB,QAAS,IAOV,OAHAyB,EAAoBH,GAAUJ,EAAQA,EAAOlB,QAASqB,GAG/CH,EAAOlB,Q,uGCnBf,eACA,SAGA,oBAAyB0B,GAIxBC,QAAQC,IAAI,qEAKZ,IAAIC,EAAanC,EAAOoC,SAASC,gBAAgB,qCAAsCC,IAGtF,MAAMC,EAAUD,EAAIE,OAEpB,EAAAC,SAASF,MAGVP,EAAQU,cAAcC,KAAKR,IAI5B,2B","file":"extension.js","sourcesContent":["import { readdir, writeFile, mkdir, exists, readFile } from 'fs';\r\nimport { join } from 'path';\r\nimport { promisify } from 'util';\r\nimport * as vscode from 'vscode';\r\nconst indexFileName = 'index';\r\nconst indexFileExt = '.ts';\r\n\r\nconst prefabName = 'prefab';\r\nconst prefabExtention = '.prefab';\r\n\r\nconst descFileName = 'desc';\r\nconst descFileExt = '.json';\r\nconst folderName = ['res', 'script', 'anim', 'prefab'];\r\n\r\nexport function genIndex(dir: string) {\r\n  let disposable=vscode.window.showInputBox({ prompt: `输入组件名称` }).then(function(msg){\r\n    if (!msg) {\r\n      exports.logger(\"error\", `组件名称不能为空!`);\r\n      throw new Error(`组件名称不能为空!`);\r\n    } else {\r\n      mkdir(dir + '/' + msg, function (err) {\r\n        if (err) {\r\n          vscode.window.showInformationMessage('文件夹:'+msg+'创建失败！');\r\n          throw err;\r\n        }\r\n      });\r\n      // 得到目录下所有文件名集合\r\n      const result =  promisify(readdir)(dir);\r\n      // 创建 目录\r\n      for (let i = 0; i < folderName.length; i++) {\r\n        mkdir(dir +'/' + msg+'/' + folderName[i], function (err) {\r\n          if (err) {\r\n            vscode.window.showInformationMessage('文件夹:'+folderName[i]+'创建失败！');\r\n            throw err;\r\n          }\r\n        });\r\n      }\r\n\r\n      readFile(join(__dirname, 'prefab.prefab'), function (err, data) {\r\n        if (err) {\r\n          vscode.window.showInformationMessage(msg + prefabExtention+'创建失败！');\r\n          throw err;\r\n        }\r\n        promisify(writeFile)(join(dir +'/' + msg+ '/prefab', msg + prefabExtention), data);\r\n  \r\n      });\r\n  \r\n      readFile(join(__dirname, 'NewScript.txt'), 'utf-8', function (err, data) {\r\n        if (err) {\r\n          vscode.window.showInformationMessage( msg + indexFileExt+'创建失败！');\r\n          throw err;\r\n        }\r\n        data = data.replace(/__template__/g, msg.toString());\r\n        promisify(writeFile)(join(dir +'/' + msg+ '/script', msg + indexFileExt), data);\r\n  \r\n      });\r\n  \r\n      readFile(join(__dirname, 'desc.json'), 'utf-8', function (err, data) {\r\n        if (err) {\r\n          vscode.window.showInformationMessage( descFileName + descFileExt+'创建失败！');\r\n          throw err;\r\n        }\r\n        data = data.replace(/__template__/g, msg.toString());\r\n        promisify(writeFile)(join(dir +'/' + msg+ '/', descFileName + descFileExt), data);\r\n  \r\n      });\r\n  \r\n  \r\n    }\r\n});;\r\n  \r\n\r\n\r\n\r\n}","module.exports = require(\"fs\");;","module.exports = require(\"path\");;","module.exports = require(\"util\");;","module.exports = require(\"vscode\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from 'vscode';\nimport { genIndex } from './createFile';\n// this method is called when your extension is activated\n// your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n\t\n\t// Use the console to output diagnostic information (console.log) and errors (console.error)\n\t// This line of code will only be executed once when your extension is activated\n\tconsole.log('Congratulations, your extension \"icecomponentinit\" is now active!');\n\n\t// The command has been defined in the package.json file\n\t// Now provide the implementation of the command with registerCommand\n\t// The commandId parameter must match the command field in package.json\n\tlet disposable = vscode.commands.registerCommand('icecomponentinit.InitICEComponent', (uri: vscode.Uri) => {\n\t\t// uri会给出命令执行时选择的路径\n\t\t// 如果右键点击文件夹，这里就是文件夹的路径\n\t\tconst dirPath = uri.fsPath\n\t\t// 需要实现一个生成index.ts文件的函数\n\t\tgenIndex(dirPath)\n\t  });\n\n\tcontext.subscriptions.push(disposable);\n}\n\n// this method is called when your extension is deactivated\nexport function deactivate() {}\n"],"sourceRoot":""}